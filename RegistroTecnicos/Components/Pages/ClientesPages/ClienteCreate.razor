@page "/Clientes/Create"
@inject ClientesService ClienteService
@inject TecnicosService tecnicoService
@inject NavigationManager navigation
@rendermode InteractiveServer
@inject Blazored.Toast.Services.IToastService ToastService

<PageTitle>Create</PageTitle>
<EditForm Model="cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container bg-light">
        <div class="card shadow">
            <div class="card-header text-center bg-primary">
                <h5 class="card-title text-white"> Crear Cliente</h5>
            </div>

            <div class="card-body">
                @*Técnico Encargado *@
                <div class="mb-3">
                    <label class="form-label"><strong>Tecnico</strong></label>
                    <div class="input-group">

                        <InputSelect class="form-control form-select" @bind-Value="cliente.TecnicoId">
                            <option value="0" selected disabled>Elija una opción</option>
                            @foreach (var Tecnicos in todosTecnicos)
                            {
                                <option value="@Tecnicos.TecnicoId">@Tecnicos.Nombres</option>
                            }
                        </InputSelect>

                    </div>
                </div>


                @*ClienteId *@
                <div class="mb-3">
                    <label class="form-label"><strong>ClienteId</strong></label>
                    <InputNumber id="id" class="form-control" @bind-Value="cliente.ClienteId" readonly></InputNumber>
                </div>

                @* Nombres*@
                <div class="mb-3">
                    <label class="form-label"><strong>Nombres</strong></label>
                    <InputText id="Nombres" class="form-control" @bind-Value="cliente.Nombres" />
                    <ValidationMessage For="@(() => cliente.Nombres)"/>
                </div>

                @*FechaIngreso*@
                <div class="mb-3">
                    <label class="form-label"><strong>Fecha de Ingreso</strong></label>
                    <InputDate id="FechaIngreso" class="form-control" @bind-Value="cliente.FechaIngreso" />
                    <ValidationMessage For="@(() => cliente.FechaIngreso)" />
                </div>

                @*Dirección *@
                <div class="mb-3">
                    <label class="form-label"><strong>Dirección</strong></label>
                    <InputText id="Direccion" class="form-control" @bind-Value="cliente.Direccion" />
                    <ValidationMessage For="@(() => cliente.Direccion)" />
                </div>

                @* RNc *@
                <div class="mb-3">
                    <label class="form-label"><strong>RNC</strong></label>
                    <InputText id="Rnc" class="form-control" @bind-Value="cliente.Rnc" />
                    <ValidationMessage For="@(() => cliente.Rnc)" />
                </div>

                @*  Límite de Crédito *@
                <div class="mb-3">
                    <label class="form-label"><strong>Límite de Crédito</strong></label>
                    <InputNumber id="LimiteCredito" class="form-control" @bind-Value="cliente.LimiteCredito" format="N2" />
                    <ValidationMessage For="@(() => cliente.LimiteCredito)" />
                </div>

                @*  Footer  *@
                <div class="card-footer text-center mt-2">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"><i class="bi bi-plus"></i> Nuevo </button>
                    <button type="submit" class="btn btn-outline-success"><i class="bi bi-check-circle-fill"></i> Guardar</button>
                    <a href="Clientes/Index" class="btn btn-outline-danger"> <i class="bi bi-arrow-bar-left"></i> Retroceder</a>
                </div>
            </div>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(MensajeError))
    {
        <div class="alert alert-danger">@MensajeError</div>
    }
</EditForm>

@code {
    public int ClienteId {get; set;}
    // public Tecnicos tecnicos = new Tecnicos();
    public Clientes cliente { get; set; } = new Clientes();
    public string MensajeError { get; set; } = string.Empty;
    public List<Tecnicos> todosTecnicos { get; set; } = new List<Tecnicos>();

    protected override async Task OnInitializedAsync()
    {
        todosTecnicos = await tecnicoService.Listar(t => true);
    }

    public async Task<bool> Validar()
    {
        var existe = await ClienteService.BuscarNombre(cliente.Nombres);
        if(existe!= null){
            MensajeError = "Este nombre ya existe";
            return false;
        }
        var existernc = await ClienteService.rnc(cliente.Rnc);
        if (existernc != null)
        {
            MensajeError = "Este RNC ya existe";
            return false;
        }
        if (cliente.TecnicoId == 0)
        {
            MensajeError = "Debe seleccionar un Técnico Encargado";
            return false;
        }
        return true;
    }

    public async Task Guardar()
    {
        if(await Validar())
        {
            await ClienteService.Guardar(cliente);
            cliente = new Clientes();
            Volver();

        }
        
        
    }

    public void Volver()
    {
        navigation.NavigateTo("Clientes/Index");
    }

    public void Nuevo()
    {
        cliente = new Clientes() { ClienteId = ClienteId,  Tecnico = new Tecnicos(), TecnicoId = 0 };
    }
}
