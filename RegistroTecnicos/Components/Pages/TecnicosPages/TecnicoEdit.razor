@page "/Tecnicos/Edit/{TecnicoId:int}"
@inject TecnicosService tecnicosService
@inject NavigationManager navigation
@rendermode InteractiveServer
@inject Blazored.Toast.Services.IToastService ToastService

<PageTitle>Editar Tecnico</PageTitle>
<div>
    @if (!string.IsNullOrEmpty(MensajeError))
    {
        <div class="alert alert-danger">@MensajeError</div>
    }
</div>
<EditForm Model="tecnicos" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h1><strong>Editar Tecnico</strong></h1>
            </div>
            <div class="card-body">

                @*Id*@
                <label for="id" class="form-label"><strong>ID</strong></label>
                <InputNumber  id="id" class="form-control" @bind-Value="tecnicos.TecnicoId" readonly></InputNumber>

                @*Nombre tecnico*@
                <label for="NombreTecnico" class="form-label"><strong>Nombre</strong></label>
                <InputText id="Nombres" class="form-control" @bind-Value="tecnicos.Nombres"></InputText>
                <ValidationMessage For="@(()=> tecnicos.Nombres)"></ValidationMessage>

                @*SueldoHora*@
                <label for="SueldoHora" class="form-label"><strong>Sueldo por hora</strong></label>
                <InputNumber  id="SueldoHora" class="form-control" @bind-Value="tecnicos.SueldoHora"></InputNumber>
                <ValidationMessage For="@(()=> tecnicos.SueldoHora)"></ValidationMessage>

            </div>
            <div class="card-footer">
                <button type="button" class="btn btn-info text-white bi bi-arrow-90deg-left" @onclick="Volver"> Volver</button>
                <button type="submit" class="btn btn-success bi bi-pencil-square"> Modificar</button>
            </div>
        </div>
    </div>

</EditForm>

@code {
    [Parameter]
    public int TecnicoId { get; set; }
    public string MensajeError { get; set; } = string.Empty;
    public Tecnicos tecnicos { get; set; } = new Tecnicos();

    protected override async Task OnInitializedAsync()
    {
        if (tecnicos != null)
        {
            tecnicos = await tecnicosService.Buscar(TecnicoId);

        }
        // else
        // {
        //     return;
        // }
    }
    public async Task<bool> Validar()
    {
        var encontrado = await tecnicosService.BuscarNombre(tecnicos.Nombres);
        if (encontrado != null && encontrado.TecnicoId != tecnicos.TecnicoId)
        {
            MensajeError = "Este nombre ya existe";
            return false;
        }
        return true;
    }

    public async Task Modificar()
    {

        if (string.IsNullOrEmpty(tecnicos.Nombres))
        {
            MensajeError = "El nombre del técnico no puede estar vacío.";
            return;
        }


        if (await Validar())
        {    
            var resultado = await tecnicosService.Guardar(tecnicos);
        	tecnicos = new Tecnicos();
			Volver(); 
		}
		else
		{
			MensajeError = "Error al modificar este registro, el nombre digitado ya existe.";
		}
	}

	public void Volver()
	{
		navigation.NavigateTo("Tecnicos/Index");
	}
}
