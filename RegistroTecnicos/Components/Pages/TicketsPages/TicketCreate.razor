@page "/Tickets/Create"
@inject TicketsService ticketsService
@inject TecnicosService tecnicoService   
@inject ClientesService clientesService 
@inject NavigationManager navigation
@rendermode InteractiveServer
@inject Blazored.Toast.Services.IToastService ToastService

<PageTitle>Create</PageTitle>
<EditForm Model="ticket" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container bg-light">
        <div class="card shadow">
            <div class="card-header text-center bg-primary">
                <h5 class="card-title text-white">Registro de Ticket</h5>

            </div>

            <div class="card-body">
                @*Ticket ID*@
                <div class="mb-3">
                    <label class="form-label"><strong>TicketId</strong></label>
                    <InputNumber id="id" class="form-control" @bind-Value="ticket.TicketId" readonly></InputNumber>
                </div>
                @* TecnicoId*@
                <div class="mb-3">
                    <label class="form-label"><strong>Tecnico</strong></label>
                    <div class="input-group">
                        <InputSelect class="form-control form-select" @bind-Value="ticket.TecnicoId">
                            <option value="0" selected disabled>Elija un Tecnico</option>
                            @foreach (var Tecnicos in todosTecnicos)
                            {
                                <option value="@Tecnicos.TecnicoId">@Tecnicos.Nombres</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                @*ClienteId*@
                <div class="mb-3">
                    <label class="form-label"><strong>Cliente</strong></label>
                    <div class="input-group">

                        <InputSelect class="form-control form-select" @bind-Value="ticket.ClienteId">
                            <option value="0" selected disabled>Elija un Cliente</option>
                            @foreach (var Clientes in todosclientes)
                            {
                                <option value="@Clientes.ClienteId">@Clientes.Nombres</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                @*Prioridad*@
                <div class="mb-3">
                    <label class="form-label"><strong>Prioridad</strong></label>
                    <div class="input-group">
                        <InputSelect class="form-control form-select" @bind-Value="ticket.Prioridad">
                            <option value="" selected disabled>Elija el nivel de Prioridad</option>
                            @foreach (var prioridad in Prioridades)
                            {
                                <option value="@prioridad">@prioridad</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                @*Fecha*@
                <div class="mb-3">
                    <label class="form-label"><strong>Fecha</strong></label>
                    <InputDate id="Fecha" class="form-control" @bind-Value="ticket.Fecha" />
                    <ValidationMessage For="@(() => ticket.Fecha)" />
                </div>


                @*Asunto*@

                <div class="mb-3">
                    <label class="form-label"><strong>Asunto</strong></label>
                    <InputText id="Asunto" class="form-control" @bind-Value="ticket.Asunto" />
                    <ValidationMessage For="@(() => ticket.Asunto)" />
                </div>
                @*Descripcion*@

                <div class="mb-3">
                    <label class="form-label"><strong> Descripcion</strong></label>
                    <InputText id="Descripcion" class="form-control" @bind-Value="ticket.Descripcion" />
                    <ValidationMessage For="@(() => ticket.Descripcion)" />
                </div>
                @*TiempoInvertido*@
                <div class="mb-3">
                    <label class="form-label"><strong>Tiempo invertido (hh:mm:ss)</strong></label>
                    <InputText id="TiempoInvertido" class="form-control" @bind-Value="ticket.TiempoInvertido" />
                    <ValidationMessage For="@(() => ticket.TiempoInvertido)" />
                </div>

                @*footer*@
                <div class="card-footer text-center mt-2">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"> <i class="bi bi-plus"></i> Nuevo </button>
                    <button type="submit" class="btn btn-outline-success"> <i class="bi bi-check-circle-fill"></i> Guardar </button>
                    <a href="/Tickets/Index" class="btn btn-outline-danger" @onclick="Volver"> <i class="bi bi-arrow-bar-left"></i> Retroceder</a>
                </div>


                <div>
                    @if (!string.IsNullOrEmpty(MensajeError))
                    {
                        <div class="alert alert-danger">@MensajeError</div>
                    }
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {

    public string MensajeError { get; set; } = string.Empty;
    public Tickets ticket = new Tickets();
    public List<Tecnicos> todosTecnicos { get; set; } = new List<Tecnicos>();
    public List<Clientes> todosclientes { get; set; } = new List<Clientes>();
    private List<string> Prioridades = new List<string> { "Alta", "Media", "Baja" };
    
    protected override async Task OnInitializedAsync()
    {
        todosTecnicos = await tecnicoService.Listar(t => true);
        todosclientes = await clientesService.Listar(c => true);
    }
    public async Task Guardar()
    {
        if (string.IsNullOrEmpty(ticket.Prioridad))
        {
            MensajeError = "El campo Prioridad no puede estar vacía.";
            return;
        }

            await ticketsService.Guardar(ticket);
            ticket = new Tickets();
            Volver();
 
       
    }

    public void Volver()
    {
        navigation.NavigateTo("Tickets/Index");
    }

    public void Nuevo()
    {
        this.ticket = new Tickets();
    }



}

